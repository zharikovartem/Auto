{
	"Create Fetch": {
		"prefix": ["1fetch", "for-const"],
		"description": "Create new Thunck creator",
		"body": [
			"import { createAsyncThunk } from '@reduxjs/toolkit'",
			"import { ThunkConfig } from '../../../config/StateSchema'",
			"import { PaginationParamsType } from '../../../../../ui-kit/Table/types/query'",
			"import { handleServerNetworkError } from '../../../../../helpers/error-helpers'",
			"import { prepareFilterParams } from '../../../../../Api/API'",
			"",
			"type ResponseType = {",
				"\t",
			"}",
			"",
			"type ApiResponseType = {",
				"\t",
			"}",
			"",
			"type RequestPropsType = {",
				"\tprojectId: number",
				"\tparams?: PaginationParamsType",
			"}",
			"",
			"export const ${1:ThunkName} = createAsyncThunk<",
				"\tResponseType,",
				"\tRequestPropsType,",
				"\tThunkConfig<any>",
			">(",
			// "\t'${2:slice}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}',", //Работает с uppercase
			"\t'${2:slice}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/downcase}${2:+_}${3:/downcase}$4/g}',",
			"\tasync (data, thunkApi) => {",
			"\t\tconst query = data.params ? prepareFilterParams(data.params) : ''",
			"\t\ttry {",
			"\t\t\tconst res = await thunkApi.extra.api().get<ApiResponseType>(`project/${data.projectId}/client-managers?`+query)",
			"\t\t\t",
			"\t\t\treturn res.data",
			"\t\t} catch (e) {",
			"\t\t\thandleServerNetworkError(e, thunkApi.dispatch, 'Не удалось получить список менеджеров клиента')",
			"\t\t} finally {",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"\t",
			")",

		]
	}, 
	"Create Thunk": {
		"prefix": ["1rthunk", "for-const"],
		"description": "Create new Thunck creator",
		"body": [
			"export const ${2:ThunkName} = (${3:data}:${4:any}): ThunkType => {",
			"\treturn async (dispatch, getState) => {",
			"\t\tconst response = await ${1:ApiName}.${2:ThunkName}(${3})",
			"\t\tif (response) {",
			"\t\t\t",
			"\t\t}",
			"\t}",
			"}"
		]
	}, 
	"Create Action": {
		"prefix": ["1rca", "for-const"],
		"description": "Create new Thunck creator",
		"body": [
			"${1:Name}: (${2:prop}:${4:PropType}) => ({type: '${3:SUBCONST}/${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}', ${2:prop}} as const),",
		]
	}, 

	"camelCaseModify": {
		"prefix": "1test",       
		"body": [
		   
		   //  first inefficient try, works for up to three words
		   //  "${1} -> ${1/^([a-z]*)([A-Z])([a-z]+)*([A-Z])*([a-z]+)*/${1:/upcase}_$2${3:/upcase}${4:+_}$4${5:/upcase}/g}"
		   
			// here is an especially gnarly version to handle edge cases like 'thisISABCTest' and trailing _'s
		   "${1} -> ${1/([a-z]+)(?=[A-Z])|([A-Z])(?=[A-Z])|([A-Z][a-z]+)(?=$)|([A-Z][a-z]+)|([a-z]+)(?=$)/${1:/upcase}${1:+_}$2${2:+_}${3:/upcase}${4:/upcase}${4:+_}${5:/upcase}/g}"
			
		],
		"description": "underscore separators"
	},
	"Api component": {
		"prefix": ["1api", "for-const"],
		"body": [
			"import { instance, url } from './API'",
			"",
			"export const ${1:}API = {",
			"\t",
			"}"
		],
		"description": "create API component"
	}, 
	"create reducer": {
		"prefix": ["1cred", "for-const"],
		"body": [
			"import { Dispatch } from 'redux'",
			"import { authAPI } from '../Api/authAPI'",
			"import { BaseThunkType, InferActionsTypes } from './store'",
			"",
			"export type InitialStateType ={",
			"\ttest: boolean",
			"}",
			"",
			"let initialState:InitialStateType = {",
			"\ttest: false",
			"}",
			"",
			"type ActionsType = InferActionsTypes<typeof actions>",
			"",
			"const ${1:name}Reducer = (state = initialState, action: ActionsType): InitialStateType => {",
			"\tswitch (action.type) {",
			"\t\tcase '${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}/TEST':",
            "\t\t\treturn {",
            "    \t\t\t\t...state,",
            "    \t\t\t\ttest: action.test",
            "\t\t\t}",

			"\t\tdefault:",
            "\t\t\treturn state;",
			"\t}",
			"}",
			"",
			"export const actions = {",
			// ": (test: boolean) => ({type: 'ABC/TETS', test} as const),",
			"\tsetAction: (test: boolean) => ({type: '${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}/TEST', test} as const),",
			"}",
			"",
			"export const getThunk = (): ThunkType => {",
			"\treturn async (dispatch, getState) => {",
			"\t\tconst response = await authAPI.tokenCheck()",
			"\t\tif (response) {",
			"\t\t\tdispatch( actions.setAction(true) )",
			"\t\t}",
			"\t}",
			"}",
			"",
			"export default ${1:name}Reducer",
			"",
			"type ActionsTypes = InferActionsTypes<typeof actions>",
			"type ThunkType = BaseThunkType<ActionsTypes>",
			"export type DispatchType = Dispatch<ActionsTypes>"
		],
		"description": "Crete Reducer"
	},

	"arrowFunction": {
		"prefix": ["1arrowFunk", "for-const"],
		"body": [
			"const ${1: name} = (${2}) => {",
			"\t",
			"}"
		],
		"description": "add useEffect to code"
	},
}